using CodingTrackerLibrary.Models;
using Microsoft.Data.Sqlite;
using Dapper;

namespace CodingTrackerLibrary.Controllers.Database;
internal class DatabaseManager
{
    private readonly string? connectionString;
    public DatabaseManager(bool dummyData = false)
    {
        int queryLength = 0;
        this.connectionString = Utilities.GetConnectionString();
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        var tableCommand = connection.CreateCommand();
        tableCommand.CommandText =
            @"CREATE TABLE IF NOT EXISTS CodingTracker (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        startDate TEXT,
                        endDate TEXT,
                        duration FLOAT,
                        units TEXT DEFAULT 'hours'
                    )";
        tableCommand.ExecuteNonQuery();

        tableCommand.CommandText = "SELECT COUNT(*) FROM CodingTracker";
        queryLength = Convert.ToInt32(tableCommand.ExecuteScalar());

        connection.Close();

        if (dummyData || queryLength == 0) this.AutoGenerateData();
    }

    private void AutoGenerateData()
    {
        var dummyCodingHabits = new List<CodingSession>
        {
            new ( startDate:  "2020-01-16", endDate: "2020-01-17", duration: 24),
            new ( startDate:  "2020-01-18", endDate: "2020-01-20", duration: 48),
            new ( startDate:  "2020-01-21", endDate: "2020-01-24", duration: 72),
            new ( startDate:  "2020-01-25", endDate: "2020-01-29", duration: 96),
            new ( startDate:  "2021-01-13", endDate: "2021-01-18", duration: 120)
        };

        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        var sql = "INSERT INTO CodingTracker (startDate, endDate, duration) VALUES (@startDate, @endDate, @duration)";
        var rowsAffected = connection.Execute(sql, dummyCodingHabits);

        Console.WriteLine($"{rowsAffected} row(s) inserted.");

        connection.Close();
    }

    public List<CodingSession> GetAllData()
    {
        List<CodingSession> codingSessions = new();
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        using var reader = connection.ExecuteReader("SELECT * FROM CodingTracker");
        while(reader.Read())
            codingSessions.Add(new CodingSession(reader.GetInt32(0), reader.GetString(1), reader.GetString(2), reader.GetFloat(3), reader.GetString(4)));
        
        reader.Close();

        connection.Close();
        return codingSessions;
    }

    public int GetNumberOfEntries()
    {
        int queryLength;
        using var connection = new SqliteConnection(this.connectionString);
        
        connection.Open();
        
        var sql = "SELECT COUNT(*) FROM CodingTracker";
        queryLength = connection.QuerySingle<int>(sql);
        
        connection.Close();

        return queryLength;
    }

    public bool IDExists(int id)
    {
        int queryLength;
        using var connection = new SqliteConnection(this.connectionString);

        connection.Open();

        var sql = "SELECT COUNT(*) FROM CodingTracker WHERE id=@id";
        CodingSession cs = new CodingSession(id);

        queryLength = connection.ExecuteScalar<int>(sql, cs);

        connection.Close();

        return queryLength > 0;
    }

    public void Update(ref int ID, ref DateTime startDate, ref DateTime endDate, TimeSpan duration)
    {
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();
        var sql = @"UPDATE CodingTracker
                      SET startDate = @startDate,
                          endDate = @endDate,
                          duration = @duration
                      WHERE
                          id = @id";

        CodingSession cs = 
            new CodingSession(ID, 
                              startDate.ToString("yyyy-MM-dd"), 
                              endDate.ToString("yyyy-MM-dd"), 
                              (float)duration.Days);
        
        connection.Execute(sql, cs);   
        connection.Close();
    }

    public void Delete(ref int id)
    {
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        var sql = "DELETE FROM CodingTracker WHERE id=@id";
        CodingSession cs = new(id);

        connection.Execute(sql, cs);

        connection.Close();
    }

    public void Insert(ref DateTime startDate, ref DateTime endDate, TimeSpan duration)
    {
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();
        
        var sql = @"INSERT INTO CodingTracker (startDate, endDate, duration)
                       VALUES(@startDate, @endDate, @duration)";

        CodingSession cs = 
            new CodingSession(startDate.ToString("yyyy-MM-dd"), 
                              endDate.ToString("yyyy-MM-dd"), 
                              (float)duration.TotalHours);
        
        connection.Execute(sql, cs);
        
        connection.Close();
    }

    public List<CodingSession> GetDataFromDate(ref DateTime start, ref DateTime end)
    {
        List<CodingSession> codingSessions = new List<CodingSession>();
        using var connection = new SqliteConnection(this.connectionString);
        
        connection.Open();

        var sql = @"SELECT * 
                   FROM CodingTracker 
                   WHERE DATE(startDate) BETWEEN DATE(@startDate) AND DATE(@endDate)";
        
        CodingSession finder = new(start.ToString("yyyy-MM-dd"), end.ToString("yyyy-MM-dd"), 0);
        
        using var reader = connection.ExecuteReader(sql, finder);
        
        while (reader.Read())
            codingSessions.Add(new CodingSession(reader.GetInt32(0), reader.GetString(1), reader.GetString(2), reader.GetFloat(3), reader.GetString(4)));
        
        reader.Close();

        connection.Close();
        
        return codingSessions;
    }

    public int GetTotalQuantity()
    {
        int total = 0; 
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        total = connection.ExecuteScalar<int>("SELECT SUM(duration) FROM CodingTracker");

        connection.Close();
        return total; 
    }

    public int GetTotalQuantityFromMonth(ref int month)
    {
        int total = 0;
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        var sql = @"SELECT SUM(duration) 
                FROM CodingTracker
                WHERE strftime('%m', startDate) = strftime('%m', @startDate)";

        CodingSession cs = new(new DateTime(0001, month, 1).ToString("yyyy-MM-dd"));
        total = connection.ExecuteScalar<int>(sql, cs);

        connection.Close();
        return total;
    }

    public List<CodingSession> GetDataSortedBy(SortingSelections sortBy, Period period)
    {
        List<CodingSession> codingSessions = new List<CodingSession>();

        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        var sql = @$"SELECT *
                    FROM CodingTracker
                    ORDER BY duration {sortBy}";

        using var reader = connection.ExecuteReader(sql);
        while (reader.Read())
            codingSessions.Add(new CodingSession(reader.GetInt32(0),
                                                 reader.GetString(1),
                                                 reader.GetString(2),
                                                 reader.GetFloat(3) / (int)period,
                                                 period.ToString()));

        connection.Close();
        return codingSessions;
    }

    public int GetHoursUntilGoal(ref DateTime startingTime)
    {
        int totalDuration = 0;
        using var connection = new SqliteConnection(this.connectionString);
        connection.Open();

        var sql = @$"SELECT SUM(duration) FROM CodingTracker WHERE DATE(startDate) = @startDate";
        CodingSession cs = new CodingSession(startDate: startingTime.ToString("yyyy-MM-dd"));

        totalDuration = connection.ExecuteScalar<int>(sql, cs);
        connection.Close();

        return totalDuration;
    }


}

